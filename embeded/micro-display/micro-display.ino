#include "arduino_secrets.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#include <DHT.h>
#include <DHT_U.h>

#define OLED_RESET 0
Adafruit_SSD1306 display(OLED_RESET);

const char* ssid = SECRET_SSID;
const char* password =  SECRET_PASSWD;

const char* mqttServer = "docker-master-1";
const int mqttPort = 1883;

float outsideTemperature = 0;
float insideTemperature = 0;
float outsideHumidity = 0;
double outsideDewPoint = 0;
char symbol = 's';

unsigned long expectedUpdateInterval = 10 * 60 * 1000; //ms
unsigned long lastUpdateMillis = 0;

//generated with: http://javl.github.io/image2cpp/
const unsigned char rain [] PROGMEM = {
  // '9-512_48x48, 48x48px -> https://www.iconfinder.com/icons/2459666/cloud_cloudy_rain_raining_weather_icon
  0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x07, 0xff,
  0xe0, 0x00, 0x00, 0x00, 0x0f, 0x80, 0xf8, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x38, 0x00, 0x00, 0x3f,
  0x9c, 0x00, 0x1c, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x1e, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x0e, 0x00,
  0x01, 0xe0, 0xf0, 0x00, 0x06, 0x00, 0x03, 0xc0, 0x30, 0x00, 0x07, 0x00, 0x03, 0x80, 0x00, 0x00,
  0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
  0x00, 0x00, 0x07, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x3e, 0x00, 0x00, 0x00, 0x07, 0xf8,
  0x38, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x70, 0x00, 0x00, 0x00,
  0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x06, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00,
  0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x78, 0x00, 0x00, 0x00,
  0x00, 0x0e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x1e, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0xe0, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0xe0, 0x00, 0x00, 0x03, 0xe0, 0x01, 0xf0, 0x00, 0x00, 0x01, 0xe0, 0x01, 0xf0, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xe0,
  0x40, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00
};

const unsigned char sun [] PROGMEM = {
  // '1-128, 48x48px -> https://www.iconfinder.com/icons/2459676/heat_hot_sun_sunny_weather_icon
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x63, 0x8c,
  0x00, 0x00, 0x00, 0x00, 0x73, 0x9c, 0x00, 0x00, 0x00, 0x08, 0x7f, 0xfe, 0x60, 0x00, 0x00, 0x0e,
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf3, 0x00,
  0x01, 0xff, 0xe0, 0x07, 0xff, 0x00, 0x01, 0xff, 0x80, 0x01, 0xff, 0x00, 0x00, 0xfe, 0x00, 0x00,
  0x7f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x1f, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x1f, 0xf0, 0x0f, 0xf0,
  0x00, 0x00, 0x07, 0xe0, 0x0f, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x07, 0xc0, 0x00, 0x00, 0x03, 0xc0,
  0x07, 0xc0, 0x00, 0x00, 0x03, 0xf0, 0x0f, 0x80, 0x00, 0x00, 0x01, 0xfe, 0x7f, 0x80, 0x00, 0x00,
  0x01, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00,
  0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe,
  0x7f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x80,
  0x00, 0x00, 0x01, 0xfe, 0x3f, 0x80, 0x00, 0x00, 0x01, 0xf8, 0x0f, 0xc0, 0x00, 0x00, 0x03, 0xe0,
  0x03, 0xc0, 0x00, 0x00, 0x03, 0xe0, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xf0, 0x07, 0xf0, 0x00, 0x00,
  0x07, 0xf0, 0x0f, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x00, 0xfc, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xfe,
  0x00, 0x00, 0x7f, 0x00, 0x00, 0xff, 0x80, 0x01, 0xff, 0x80, 0x00, 0xff, 0xe0, 0x07, 0xff, 0x80,
  0x00, 0xcf, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff,
  0x70, 0x00, 0x00, 0x06, 0x7f, 0xff, 0x10, 0x00, 0x00, 0x00, 0x39, 0xce, 0x00, 0x00, 0x00, 0x00,
  0x31, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x20, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char cloudy [] PROGMEM = {
  // '11-512, 48x48px -> https://www.iconfinder.com/icons/2459672/cloud_cloudy_overcast_weather_icon
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x7f, 0xa0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0b, 0xe0, 0xfc, 0x00,
  0x00, 0x00, 0x0f, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x3c, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x18, 0x00, 0x06, 0x0f, 0x80, 0x00, 0x38, 0x00, 0x07, 0xff, 0xe0, 0x00,
  0x78, 0x00, 0x03, 0xfd, 0xf8, 0x00, 0x30, 0x00, 0x03, 0xe0, 0x3c, 0x00, 0x30, 0x00, 0x03, 0x80,
  0x0e, 0x00, 0x70, 0x03, 0xff, 0x00, 0x07, 0x00, 0x30, 0x0f, 0xff, 0x00, 0x07, 0x00, 0x38, 0x1e,
  0x1e, 0x00, 0x03, 0x00, 0x78, 0x1c, 0x06, 0x00, 0x03, 0x80, 0x18, 0x18, 0x00, 0x00, 0x03, 0x80,
  0x1c, 0x38, 0x00, 0x00, 0x03, 0x80, 0x1e, 0x38, 0x00, 0x00, 0x03, 0x80, 0x07, 0xf8, 0x00, 0x00,
  0x03, 0xe0, 0x0f, 0xf0, 0x00, 0x00, 0x03, 0xf8, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x3c, 0x03, 0x80,
  0x00, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 0x07,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0x80,
  0x00, 0x00, 0x00, 0x0e, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x7c,
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

WiFiClient espClient;
PubSubClient client(espClient);
int screenIndex = 0;
unsigned long interval = 8000; // the time we need to wait between screen changes
unsigned long previousMillis = 0;

void setup() {
  Serial.begin(9600);
  WiFi.begin(ssid, password);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

  displayText("BOOT", "WIFI");
  displayProgress(10);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    displayText("BOOT", "WIFI ...");
    displayProgress(40);
  }
  displayProgress(50);

  displayText("BOOT", "MQTT");
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
  displayProgress(60);

  displayText("BOOT", "MQTT ...");
  while (!client.connected()) {
    displayProgress(70);

    if (client.connect("ESP8266Client")) {

      displayText("BOOT", "MQTT V");
      client.subscribe("weather/actual/+"); //outside
      displayProgress(100);

    } else {
      displayText("BOOT", "MQTT X");
      delay(2000);
      displayText("MQTT", String(client.state()));
      delay(2000);
    }
  }

  // Clear the buffer.
  display.clearDisplay();

}

void loop() {
  client.loop();

  unsigned long currentMillis = millis(); // grab current time

  if ((unsigned long)(currentMillis - previousMillis) >= interval) {
    screenIndex ++;
    if (screenIndex > 1) {
      if ((unsigned long)(millis() - lastUpdateMillis) >= expectedUpdateInterval) {
        screenIndex = -1; //show battery screen
      } else {
        screenIndex = 0;
      }
    }
    showScreen(screenIndex);
    previousMillis = millis();
  }

}

void showScreen(int index) {
  switch (index) {
    case 0:
      displayOutsideTemperature();
      break;
    case 1:
      displayOutsidePrediction();
      break;
    //case 2:
    //  displayInsideTemperature();
    //  break;
    default:
      displayChargeLevel(0);
      break;
  }
}

void displayOutsideTemperature() {
  displayText(String(round(outsideTemperature)), "OUT");
}

void displayInsideTemperature() {
  displayText(String(round(insideTemperature)), "IN");
}

void displayOutsidePrediction() {
  display.clearDisplay();
  if (symbol == 'r') {
    display.drawBitmap(0, 0,  rain, 48, 48, 1);
  } else {
    if (symbol == 'c') {
      display.drawBitmap(0, 0,  cloudy, 48, 48, 1);
    } else {
      display.drawBitmap(0, 0,  sun, 48, 48, 1);
    }
  }
  display.setTextSize(0);
  display.setTextColor(WHITE);
  display.setCursor(50, 0);
  display.println(String(round(outsideHumidity)));
  display.setCursor(50, 10);
  display.println(String(round(outsideDewPoint)));
  display.display();
}

void displayChargeLevel(int level) {
  displayText("BAT", "");
}

void displayText(String textline1, String textline2) {
  display.clearDisplay();
  display.display();
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(textline1);


  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 35);
  display.println(textline2);

  display.display();
}

void displayProgress(int i) {
  display.drawLine(0, display.height() - 1, display.width(), display.height() - 1, BLACK);
  display.drawLine(0, display.height() - 1, display.width()*i / 100, display.height() - 1, WHITE);
  display.display();
}

void callback(char* topicArray, byte* payloadArray, unsigned int length) {
  String payload = String((char*)payloadArray);
  String topic = String(topicArray);
  Serial.println("Message received: " + topic + " = " + payload);
  if (topic.endsWith("temperature")) {
    Serial.println("update outside temperature");
    outsideTemperature = payload.toFloat();
  }
  if (topic.endsWith("humidity")) {
    Serial.println("update outside humidity");
    outsideHumidity = payload.toFloat();
  }
  if (topic.endsWith("dewpoint")) {
    Serial.println("update outside dewpoint");
    outsideDewPoint = payload.toFloat();
  }
  if (topic.endsWith("icon")) {
    symbol = 'c';
    Serial.println("update outside symbol");
    if(payload.startsWith("09") || payload.startsWith("1")){
      symbol = 'r';
    }
    if(payload.startsWith("01")){
      symbol = 's';
    }
    Serial.println(symbol);
  }
  lastUpdateMillis = millis();
}
